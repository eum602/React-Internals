{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","clickeo","name","age","children","onChange","changed","value","App","state","persons","switchNameHandler","newName","_this","setState","nameChangeHandler","event","target","_this2","this","style","backgroundColor","font","border","padding","pointer","Person_Person","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAWeA,SATA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACbH,EAAAC,EAAAC,cAAA,KAAGE,QAAWL,EAAMM,SAApB,QAAmCN,EAAMO,KAAzC,aAAyDP,EAAMQ,IAA/D,cACAP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,UACVR,EAAAC,EAAAC,cAAA,SAAOO,SAAYV,EAAMW,QAASC,MAASZ,EAAMO,UC4C9CM,oNA9CbC,MAAQ,CACNC,QAAU,CACR,CAACR,KAAK,QAAQC,IAAI,MAClB,CAACD,KAAK,QAAQC,IAAI,MAClB,CAACD,KAAK,QAAQC,IAAI,UAGtBQ,kBAAoB,SAACC,GACnBC,EAAKC,SAAS,CAACJ,QAAQ,CACrB,CAACR,KAAKU,EAAQT,IAAI,MAClB,CAACD,KAAK,OAAOC,IAAI,MACjB,CAACD,KAAK,QAAQC,IAAI,YAGtBY,kBAAoB,SAACC,GACnBH,EAAKC,SAAS,CAACJ,QAAQ,CACrB,CAACR,KAAK,QAAQC,IAAI,MAClB,CAACD,KAAKc,EAAMC,OAAOV,MAAMJ,IAAI,MAC7B,CAACD,KAAK,OAAOC,IAAI,kFAIZ,IAAAe,EAAAC,KAQP,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,UAASsB,MAXC,CACZC,gBAAkB,QAClBC,KAAO,UACPC,OAAS,gBACTC,QAAU,MACVC,QAAW,WAMgBzB,QAAW,kBAAMkB,EAAKP,kBAAkB,WAAjE,eACAf,EAAAC,EAAAC,cAAC4B,EAAD,CAAQxB,KAAMiB,KAAKV,MAAMC,QAAQ,GAAGR,KAAMC,IAAKgB,KAAKV,MAAMC,QAAQ,GAAGP,MACrEP,EAAAC,EAAAC,cAAC4B,EAAD,CAAQxB,KAAMiB,KAAKV,MAAMC,QAAQ,GAAGR,KAAMC,IAAKgB,KAAKV,MAAMC,QAAQ,GAAGP,IACrEF,QAAWkB,KAAKR,kBAAkBgB,KAAKR,KAAK,UAC5Cb,QAAWa,KAAKJ,oBAChBnB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQxB,KAAMiB,KAAKV,MAAMC,QAAQ,GAAGR,KAAMC,IAAKgB,KAAKV,MAAMC,QAAQ,GAAGP,KAArE,iCAxCUyB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c3075cfb.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Person.css\"\nconst person = (props) => {\n    return (\n        <div className = \"Person\">\n            <p onClick = {props.clickeo}>I am {props.name} and I am {props.age} years old</p>\n            <p>{props.children}</p>\n            <input onChange = {props.changed} value = {props.name} />\n        </div>        \n    )\n}\nexport default person;","import React, { Component } from 'react';\nimport Person from \"./Person/Person.js\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    persons : [\n      {name:\"Erick\",age:\"25\"},\n      {name:\"Jorge\",age:\"48\"},\n      {name:\"David\",age:\"32\"}\n    ]\n  }\n  switchNameHandler = (newName) =>{\n    this.setState({persons:[\n      {name:newName,age:\"80\"},\n      {name:\"Lato\",age:\"25\"},\n      {name:\"David\",age:\"22\"}\n    ]})\n  }\n  nameChangeHandler = (event) =>{\n    this.setState({persons:[\n      {name:\"Erick\",age:\"80\"},\n      {name:event.target.value,age:\"25\"},\n      {name:\"Said\",age:\"22\"}\n    ]})\n  }\n\n  render() {\n    const style = {\n      backgroundColor : 'white',\n      font : 'inherit',\n      border : '1x solid blue',\n      padding : '8px',\n      pointer :  'pointer'\n    }\n    return (\n      <div className=\"App\">\n        <h1>this is an App</h1>\n        <p>This is really working</p>\n        <button  style = {style} onClick = {() => this.switchNameHandler(\"Maxx!\")}>Switch name</button>\n        <Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>\n        <Person name={this.state.persons[1].name} age={this.state.persons[1].age}\n        clickeo = {this.switchNameHandler.bind(this,\"max2!!\")}\n        changed = {this.nameChangeHandler}/>\n        <Person name={this.state.persons[2].name} age={this.state.persons[2].age}>This is my best hobby</Person>\n      </div>\n    );\n    //return React.createElement(\"div\",{className:\"App\"},React.createElement(\"h1\",null,\"This is an app\"))\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}